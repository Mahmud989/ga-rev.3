/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package genetics;

import Constant.Condition;
import Constant.Const;
import Constant.Range;
import Constant.Strings;
import javax.swing.table.DefaultTableModel;
import org.mariuszgromada.math.mxparser.Expression;

/**
 *
 * @author Mahmud
 */
public class NewGUI extends javax.swing.JFrame {

    /**
     * Creates new form NewGUI
     */
    public NewGUI() {
        initComponents();
    }
    DefaultTableModel model;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        profitSearch = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        varCount = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        FunctionString = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ConditionsStrings = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        LoopCount = new javax.swing.JSpinner();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        MinS = new javax.swing.JRadioButton();
        MaxS = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Generation", "Mutation", "x", "y", "z", "f(x,y,z)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setAutoscrolls(false);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable1);

        varCount.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 100));

        jLabel1.setText("Var count ");

        jLabel2.setText("Function ");

        jLabel3.setText("Conditions");

        ConditionsStrings.setColumns(20);
        ConditionsStrings.setRows(5);
        jScrollPane3.setViewportView(ConditionsStrings);

        jLabel4.setText("Loop count");

        LoopCount.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 100));

        jButton1.setText("Compute");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Show Graph");

        jLabel5.setText("Profit");

        profitSearch.add(MinS);
        MinS.setText("Min");

        profitSearch.add(MaxS);
        MaxS.setSelected(true);
        MaxS.setText("Max");
        MaxS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaxSActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 852, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(varCount, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(FunctionString)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(LoopCount, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(79, 79, 79)
                                    .addComponent(jLabel5)
                                    .addGap(18, 18, 18)
                                    .addComponent(MinS)
                                    .addGap(18, 18, 18)
                                    .addComponent(MaxS)))))
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(0, 41, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 774, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(varCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(FunctionString, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(LoopCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(MinS)
                    .addComponent(MaxS))
                .addGap(29, 29, 29)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(26, 26, 26)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1420, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        model = (DefaultTableModel) jTable1.getModel();
        int iteration = Integer.parseInt(LoopCount.getModel().getValue().toString());
        // model.removeRow(0);
        jProgressBar1.setValue(0);
        jProgressBar1.setMaximum(iteration);
        jProgressBar1.setStringPainted(true);
        jButton1.setEnabled(false);
        new Thread() {
            double last_x = 0;

            String functionStr = FunctionString.getText();

            /*
100 * x[0] + 200 * x[1] <= 10000
10 * x[0] + 30 * x[1] <= 1200
x[0] + x[1]<=110
x[0]>=0
x[1]>=0
             */
            @Override
            public void run() {
                Const.setFunction((Double... x) -> {
                    String sb = new String(functionStr);
                    System.out.println(x.length);
                    for (int i = 0; i < x.length; i++) {
                        sb = sb.replace("x[" + i + "]", "" + x[i]);
                    }
                    System.out.println(sb);
                    Expression expr = new Expression(sb);
                    return expr.calculate();
                });

                Const.setConditions((x) -> {
                    String sb = new String(ConditionsStrings.getText());

                    for (int i = 0; i < x.length; i++) {
                        sb = sb.replace("x[" + i + "]", "" + x[i]);
                    }
                    sb = sb.trim();
                    sb.replaceAll("\n", "&");
                    Expression expr = new Expression(sb);
                    return (expr.calculate() == 1.0); //To change body of generated lambdas, choose Tools | Templates.
                });

                Const.setSearch((MinS.isSelected() ? Const.MIN : Const.MAX));
                Const.setRanges(new Range[]{
                    new Range(78, 102),
                    new Range(33, 45),
                    new Range(27, 45),
                    new Range(27, 45),
                    new Range(27, 45)
                });
                Const.setVar_count(Integer.parseInt(varCount.getModel().getValue().toString()));
                Population p = new Population();
                int generation = 0;
                /////first print begin
                p.computeAllChromosomeValue();
                Double[] vars = p.getOptimalChromosome();
                //                                    chromosome.getMinElements();
                String[] data = new String[6];
                data[0] = "" + generation;
                data[1] = "" + false;
//                for (int i = 0; i < 3; i++) {
//                    data[i + 2] = String.format("%.8f", vars[i]);
//                }
                double x = Const.compute(vars);
                last_x = x;
                data[5] = String.format("%.22f", x);
                model.addRow(data);
                //////first print end
                while (generation < iteration) {

                    p.computeAllChromosomeValue();
                    p.crossOver();
                    p.computeAllChromosomeValue();
                    p.createNewGeneration();
                    p.computeAllChromosomeValue();
                    p.crossOver();

                    boolean mutation = false;
                    if (generation % 2 == 0) {
                        p.mutate();
                        mutation = true;
                    }

                    p.computeAllChromosomeValue();
                    p.createNewGeneration();
                    p.computeAllChromosomeValue();
                    //
                    vars = p.getOptimalChromosome();
                    x = Const.compute(vars);
                    if (/*(generation + 1) % 50000 == 0*/x != last_x) {
                        last_x = x;
                        //                        int chrNumber = 1;
                        //                        for (Chromosome chromosome : p.chromosomes) {
                        //                                    chromosome.getMinElements();
                        data = new String[6];
                        data[0] = "" + (generation + 1);
                        data[1] = "" + mutation;
                        for (int i = 0; i < 3; i++) {
                            data[i + 2] = String.format("%.8f", vars[i]);
                        }
                        data[5] = String.format("%.22f", Const.compute(vars));
                        model.addRow(data);
                        //                        }

                    }
                    generation++;
                    jProgressBar1.setValue(generation);
                    // p.printValues();

                }
                p.printOptimalChromosome();
                jButton1.setEnabled(true);
                //                array = new DoubleArray();
                //                gen = new DoubleArray();
            }

        }.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void MaxSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaxSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MaxSActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea ConditionsStrings;
    private javax.swing.JTextField FunctionString;
    private javax.swing.JSpinner LoopCount;
    private javax.swing.JRadioButton MaxS;
    private javax.swing.JRadioButton MinS;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.ButtonGroup profitSearch;
    private javax.swing.JSpinner varCount;
    // End of variables declaration//GEN-END:variables
}
